// Generated by CoffeeScript 1.9.3
(function() {
  var DEFAULT_OPTIONS, EMPTY, Hashtable, NO_NEXT;

  DEFAULT_OPTIONS = {
    reserved: 997,
    valueArray: Float64Array,
    keyArray: Int32Array,
    multiple: 2,
    resizeFactor: 1.9,
    "default": 0
  };

  EMPTY = -2;

  NO_NEXT = -1;

  Hashtable = (function() {
    function Hashtable(options) {
      var k, ref, v;
      if (options == null) {
        options = {};
      }
      this._options = {};
      for (k in DEFAULT_OPTIONS) {
        v = DEFAULT_OPTIONS[k];
        this._options[k] = (ref = options[k]) != null ? ref : v;
      }
      this._reset();
    }

    Hashtable.prototype.resize = function(reserved) {
      var M, i, j, keys, next, ref, results, values;
      if (reserved == null) {
        reserved = parseInt(this._options.reserved * this._options.resizeFactor);
      }
      console.log(reserved);
      next = this._next;
      values = this._values;
      keys = this._keys;
      M = this._M;
      this._options.reserved = reserved;
      this._reset();
      results = [];
      for (i = j = 0, ref = M; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (next[i] !== EMPTY) {
          results.push(this.set(keys[i], values[i]));
        }
      }
      return results;
    };

    Hashtable.prototype._reset = function() {
      var N, i, j, ref;
      N = this._options.size = this._options.reserved * this._options.multiple;
      this._next = new Int32Array(N);
      this._values = new this._options.valueArray(N);
      this._keys = new this._options.keyArray(N);
      this._N = 0;
      for (i = j = 0, ref = N; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        this._next[i] = EMPTY;
      }
      this._M = this._options.reserved;
      this._size = this._options.size;
      return this._reserved = this._options.reserved;
    };

    Hashtable.prototype.set = function(key, value) {
      var n;
      if (this._M + 1 >= this._size) {
        this.resize();
      }
      n = key % this._reserved;
      while (true) {
        if (this._next[n] === EMPTY) {
          this._next[n] = NO_NEXT;
          break;
        }
        if (this._keys[n] === key) {
          break;
        }
        if (this._next[n] === NO_NEXT) {
          this._next[n] = this._M++;
          this._N++;
        }
        n = this._next[n];
      }
      this._values[n] = value;
      return this._keys[n] = key;
    };

    Hashtable.prototype.get = function(key, value) {
      var n;
      n = key % this._reserved;
      while (true) {
        if (this._next[n] < 0) {
          break;
        }
        if (this._keys[n] = key) {
          return this._values[n];
        }
        n = this._next[n];
      }
      return this._options["default"];
    };

    Hashtable.prototype.toJSON = function() {
      var i, j, obj, ref;
      obj = {};
      for (i = j = 0, ref = this._M; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (this._next[i] !== EMPTY) {
          obj[keys[i]] = values[i];
        }
      }
      return obj;
    };

    return Hashtable;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Hashtable;
  } else {
    this.Hashtable = Hashtable;
  }

}).call(this);
