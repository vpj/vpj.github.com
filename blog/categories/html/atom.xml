<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: html | vpj's diary]]></title>
  <link href="http://vpj.github.com/blog/categories/html/atom.xml" rel="self"/>
  <link href="http://vpj.github.com/"/>
  <updated>2013-02-01T21:45:48+05:30</updated>
  <id>http://vpj.github.com/</id>
  <author>
    <name><![CDATA[Varuna Jayasiri]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A few months with Coffeescript]]></title>
    <link href="http://vpj.github.com/blog/2013/02/01/a-few-months-with-coffeescript/"/>
    <updated>2013-02-01T21:42:00+05:30</updated>
    <id>http://vpj.github.com/blog/2013/02/01/a-few-months-with-coffeescript</id>
    <content type="html"><![CDATA[<p>We moved to <a href="http://coffeescript.org">coffeescript</a> about 3 months back and
Rewrote all the javascript code in coffescript in active projects.
So far things have been very smooth and we are really happy about the move.</p>

<p><span class='pullquote-right' data-pullquote='easy to learn.'>
Coffeescript is well documented and was quite easy to learn.
It only took a few hours to skim through the documentation and start coding.
Some features of coffeescript was not used at first because of our previous coding patterns.
</span></p>

<p><span class='pullquote-right' data-pullquote='more readable'>
Coffeescript is defenitely more readable than javascript. Almost all operators are replaced with words.
Although this increases the length of the code, it becomes much easier to read.
</span></p>

<p>For example, <code>if, then, else</code> is used instead of conditional statements <code>?:</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Conditional statement  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">workingHours = </span><span class="k">if</span> <span class="nx">sunday</span> <span class="k">then</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!--
Coffescript doesn't use semicolan and block expressions are delimeted by indentation.
Using `@property` instead of `this.property` improves readability while reducing the number of keystrokes.
-->


<p><span class='pullquote-right' data-pullquote='fewer lines code'>
Code written is coffeescript consists of fewer lines code, and sometimes fewer character in each line.
No curly brackets <code>{, }</code>, simpler function declerations, no variable declerations, etc.
are a few reasons for this. I believe coffeescript reduced the number of lines of our code by 15% to 40%.
</span></p>

<p>Also, Coffeescript has some cool features such as existance operator,
default values for function arguments, looping through arrays and objects, array slicing,
destructuring assignements, string interpolation, etc. to solve some of
the frequently occuring difficulties in javascript.</p>

<p>For instance, with string interpolation, instead of having to code
<code>"&lt;h1&gt;" + heading + "&lt;/h1&gt;&lt;p&gt;" + description + "&lt;/p&gt;</code>,
you could just write <code>"&lt;h1&gt;#{heading}&lt;/h1&gt;&lt;p&gt;#{description}&lt;/p&gt;"</code>.</p>

<h2>One language to rule them all</h2>

<p>We are using <a href="https://github.com/gradus/coffeecup">coffeecup</a> instead of HTML. So this takes of the need to maintain templates separately,
with different template engines for backend and frontend. Coffeecup templates are stored
in separate coffeescript files which are used by both the browser code (frontend)
and node js (backend) - we need backend rendering for indexing bots. And you can avoid repetitive
HTML sections by implementing helpers which can be reused.</p>
]]></content>
  </entry>
  
</feed>
